using System.Collections.Generic;
using System.Linq;

namespace Aoc2020.XMAS {
    public class XMASExploiter {

        private XMASEncryptedMessage message;
        public XMASExploiter(XMASEncryptedMessage message) {
            this.message = message;
        }
        public long FindFirstNumberWhichIsNotSum() {
            IList<long> numbersToConsider = new List<long>();
            for (int i = 0; i < message.PreambleLength; i++) {
                numbersToConsider.Add(message.GetNextNumber());
            }


            long numberToValidate;
            bool isValid;
            do {
                numberToValidate = message.GetNextNumber();
                isValid = (from i in Enumerable.Range(0, numbersToConsider.Count)
                           from y in numbersToConsider.Skip(i + 1)
                           let x = numbersToConsider[i]
                           select x + y == numberToValidate).Any(b => b); // must supply parameter, otherwise Any behaves differently

                for (int i = 0; i < message.PreambleLength - 1; i++) {
                    numbersToConsider[i] = numbersToConsider[i + 1];
                }
                numbersToConsider[message.PreambleLength - 1] = numberToValidate;
            } while (isValid);
            return numberToValidate;
        }

        public long FindWeakness(long invalidNumber) {
            Queue<long> contiguousSet = new Queue<long>();

            long currentSum = 0;
            while (currentSum != invalidNumber) {
                if (currentSum > invalidNumber) {
                    currentSum -= contiguousSet.Dequeue();

                } else {
                    long nextNumber = message.GetNextNumber();
                    contiguousSet.Enqueue(nextNumber);
                    currentSum += nextNumber;
                }
            }

            long min = contiguousSet.Min();
            long max = contiguousSet.Max();

            return min + max;
        }

    }
}
